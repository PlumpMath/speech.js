{"version":3,"file":"public/scripts/app.js","sources":["app/_scripts/config.js","app/_scripts/dns.js","app/_scripts/fail.js","app/_scripts/nav.js","app/_scripts/record.js","app/_scripts/resize.js","app/app.js","app/scripts/helloWorld.js"],"names":[],"mappingshlxHA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnzMA;;A,CCAA;;AACA;AACA;AAFA;;A","sourcesContent":["/**\n * @license AGPLv3 2013\n * @author indolering\n */\n\n//TODO: Create Github ticket about th eneed for a new build config\nrequire.config({\n  paths: {\n    jquery: '../bower_components/jquery/jquery',\n    bootstrap: '../bower_components/bootstrap/dist/js/bootstrap',\n    domReady: '../bower_components/requirejs-domready/domReady',\n    requirejs: '../bower_components/requirejs/require',\n    URI: '../bower_components/uri.js/src/URI',\n    IPv6: '../bower_components/uri.js/src/IPv6',\n    SecondLevelDomains: '../bower_components/uri.js/src/SecondLevelDomains',\n    punycode: '../bower_components/uri.js/src/punycode',\n    URITemplate: '../bower_components/uri.js/src/URITemplate',\n    'jquery.URI': '../bower_components/uri.js/src/jquery.URI'\n  }\n});\n\n//pretty sure this should just be define.\ndefine(function(require) {\n  'use strict';\n\n  var $ = require('jquery'),\n    URI = require('URI'),\n    domReady = require('domReady'),\n    DNS = require('dns');\n//  (['config', 'DNS', 'URI', '$', 'domReady'],\n//  function(config, DNS, URI, $, domReady) {\n//    'use strict';\n    function config() {\n      console.log('config created');\n    }\n      //redo this correctly using handlebar partials\n      config.createEntries = function(records) {\n        if (records === null || records === undefined || records.length < 1) {\n          records = DNS.getRecords();\n        }\n        var accordion = $('#accordion');\n        records.forEach(function(r) {\n          if (r.name !== undefined && r.name !== 'undefined') {\n\n            //TODO: redo using Jade or handlebars\n            var content =\n              '<div id =\"' + r.name + '-panel\" class=\"panel panel-default\">' +\n                '<div class=\"panel-heading\">' +\n                '<h4 class=\"panel-title\">' +\n                '<h4 class=\"panel-title\">' +\n                '<a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#' + r.name + '-container\">' +\n                r.name + '</a>' +\n                '</h4>' +\n                '    </div>' +\n                '    <div id=\"' + r.name + '-container\" class=\"panel-collapse collapse\">' +\n                '    <div class=\"panel-body\"><pre id=\"' + r.name + '-value\">' + JSON.stringify(r.value, undefined, 2) +\n                '</pre></div>' +\n                '<button onclick=\\'config.del(\"' + r.name + '\")\\'' +\n                ' class=\"pull-right btn btn-danger\">delete</button>' +\n                '<a href=#editor>' +\n                '<button onclick=\\'config.edit(\"' + r.name + '\")\\'' +\n                ' class=\"pull-right btn btn-warning\">edit</button>' +\n                '</a>' +\n                '    </div>' +\n                '  </div>';\n          }\n          accordion.append(content);\n        });\n\n      }\n\n      config.edit = function(name) {\n\n        $('#editor').val(JSON.stringify(DNS.lookup(name).value,undefined,2));\n        $('#name').val(name);\n      };\n\n      config.save = function() {\n        var name = $('#name').val();\n        var value = $('#editor').val();\n        DNS.save({name: name, value: value});\n        config.createEntries([DNS.lookup(name)]);\n      };\n\n      config.del = function(name) {\n        $('#' + name + '-panel').remove();\n        DNS.delete(name);\n      };\n\n    window.config = config;\n    domReady(function () {\n      config.createEntries();\n    });\n    return config;\n\n  }\n);","/**\n * TODO: Switch to webworkers and setup monitoring for background updates\n * TODO: When Firefox enables webworker access to IndexDB, switch to PouchDB\n * TODO: Adapters for github, twitter, fb, WebRTC DHT, etc.\n * @license AGPLv3 2013\n * @author indolering\n */\n\ndefine(function(require) {\n  'use strict';\n\n  var $ = require('jquery'),\n    URI = require('URI'),\n    SecondLevelDomains = require('SecondLevelDomains'),\n    Record = require('Record'),\n    Fail = require('Fail');\n\n  function DNS() {\n    this.pubs = {};\n    //TODO: Load providers from localStorage\n    this.pubs.speechis = function(name) {\n      $.ajax({\n        url     : 'http://api.bits.name',\n        type    : 'get',\n        data    : name,\n        dataType: 'json',\n        async   : false,\n        fail    : function(jqXHR, status, error) {\n          console.error(\n            'Call failed :' + status,\n            \"Error: \" + error,\n            jqXHR);\n          return false;\n        },\n        done    : function(data) {\n          return data;\n        }\n      });\n    }\n  }\n\n  /**\n   * Equivalent to namecoind name_show d/name or whois on traditional DNS but\n   * it assumes '.bit' and it does not support including ANY tld in the query.\n   * @param {string} name Domain to lookup, assumes '.bit' tld.\n   * @returns {Record} Full DNS record for 'name'\n   */\n  DNS.lookup = function(name) {\n    /**\n     * Check localStorage for cached result\n     * @type {Record}\n     */\n    var r = localStorage.getItem(name);\n\n    if (r === null) {\n      $.ajax({\n        url     : 'http://api.bits.name',\n        type    : 'get',\n        data    : { name: name },\n        dataType: 'json',\n        async   : false,\n        done    : function(data) {\n          r = data;\n        },\n        fail    : function(jqXHR, status, error) {\n          console.error(\n            'Call failed :' + status,\n            \"Error: \" + error,\n            jqXHR);\n        }\n      });\n    }\n\n    if(typeof r === \"string\")\n      r = JSON.parse(r);\n\n    if (r === null || r.value === null)\n      throw new Fail({name: 'name'}).over();\n\n    return this.save(r);\n  }\n\n  /**\n   * NOT WORKING Fetches data from remote hosts.\n   * @param {string} name\n   */\n  DNS.fetch = function(name) {\n    var r = {name: name};\n    var pubs = DNS.pubs;\n    var publishers =  Object.keys(DNS.pubs);\n    publishers.forEach(function(pub) {\n      var value = pub(name);\n      if (value) {\n        r.value = value;\n      }\n    });\n    if (r.value){\n      return this.save(r);\n    } else {\n      return false;\n    }\n  };\n\n  /**\n   * Saves record to appropriate container and inits _jsdns if needed.\n   * @param {Record} r DNS record to be saved.\n   */\n  DNS.save = function(r) {\n    if (r.__jsdns === null || r.__jsdns === undefined) {\n      r = new Record(r.name, r.value);\n    }\n\n    localStorage.setItem(r.name, JSON.stringify(r));\n    return r;\n  };\n\n  /**\n   * Removes record client storage.\n   * @param {String} name Name of DNS record to be removed.\n   */\n  DNS.delete = function(name) {\n    localStorage.removeItem(name);\n  };\n\n  /**\n   * Returns *all* records in client storage.\n   * @returns {Array.<bit-value>} Array of DNS records.\n   */\n  DNS.getRecords = function() {\n    var records = [];\n    Object.keys(localStorage).forEach(function(key){\n      if (key.substring(0,1) !== '_' &&\n        key !== 'consoleHistory' &&\n        key !== 'breakpoints' &&\n        key !== 'undefined' &&\n        key !== undefined) {\n        var r = JSON.parse(localStorage.getItem(key));\n        records.push({name: r.name, value: r.value});\n      }\n    });\n    return records;\n  };\n\n  return DNS;\n});\n\n","/**\n * @license AGPLv3 2013\n * @author indolering\n */\ndefine('Fail', function(require) {\n  'use strict';\n\n  var $ = require('jquery'),\n    URI = require('URI'),\n    SecondLevelDomains = require('SecondLevelDomains'),\n    punycode = require('punycode');\n\n  /**\n   * Settings object for Fail errors.\n   * @typedef {Object} failParams\n   * @property {bit-value} value - this.message.value,\n   * @property {number} code - this.message.code,\n   * @property {string} name - this.message.name,\n   * @property {string} message - this.message.message\n   * */\n\n  /**\n   * Factory for Fail (custom error) objects. Convenience method for packaging\n     * the URL to the error page and translating error codes.\n   * @param { failParams } failInfo\n   * @constructor\n   * @template Fail\n   * @returns {Fail}\n   */\n  function Fail(failInfo) {\n\n    this.name = failInfo.name || \"Fail\";\n    this.message = failInfo;\n\n  }\n\n  Fail.prototype = new Error();\n  Fail.prototype.constructor = Fail;\n\n  Fail.prototype.over = function() {\n\n    var e = {\n      url    : location.href,\n      urn    : new URI().subdomain().split('.').slice(-1).pop(),\n      value  : this.message.value,  //r.value...\n      name   : this.message.name,\n      message: this.message.message\n    };\n\n    var redirect = new URI().path('error.html').subdomain('');\n\n\n    switch (e.name.toLowerCase()) {\n      case 'format':\n        e.text = 'The name server was unable to interpret the query.';\n        e.code = 1;\n        break;\n      case 'server':\n        e.text = 'The name server was unable to process this query due to a problem with the name server.';\n        e.code = 2;\n        break;\n      case 'name':\n        e.text = 'Domain name referenced in the query does not exist.';\n        e.code = 3;\n        e.message = 'The domain name ' + e.urn + ' could not be found';\n//        redirect.path('connect.html');\n        break;\n      case 'unimplemented':\n        e.text = 'The name server does not support the requested kind of query.';\n        e.code = 4;\n        redirect.path('connect.html');\n        break;\n      case 'unauthorized':\n        e.text = 'Authentication is required and has failed or has not yet been provided.';\n        e.code = 401;\n        break;\n      case 'forbidden':\n        e.text = 'Successful authentication but credentials do not grant the client permission to access the resource.';\n        e.code = 403;\n        break;\n      case 'timeout':\n        e.text = 'The server timed out waiting for the request.';\n        e.code = 408;\n        redirect.path('connect.html');\n        break;\n      case 'length':\n        e.text = 'URI too long.';\n        e.code = 414;\n        break;\n      case 'calm':\n        e.text = 'The user has sent too many requests in a given amount of time. Intended for use with rate limiting schemes.';\n        e.code = 420;\n        break;\n      case 'rate':\n      case 'flood':\n        e.text = 'The user has sent too many requests in a given amount of time. Intended for use with rate limiting schemes.';\n        e.code = 429;\n        break;\n      case 'censored':\n        e.text = 'Unavailable For Legal Reasons';\n        e.code = 451;\n        break;\n      default:\n        if (!e.code)\n          e.code = -1;\n\n        if (!e.name)\n          e.name = 'unknown';\n\n        if (!e.message)\n          e.message = 'There was a problem looking up your request.';\n    }\n\n    console.log(e.name, e);\n\n    location.href = new URI().\n      path('error.html').\n      subdomain('').\n      addQuery(e).\n      href();\n  };\n\n  return Fail;\n\n});\n\n","/**\n * @license AGPLv3 2013\n * @author indolering\n */\n//\n//require(['DNS', 'resize', 'Fail', 'URI', 'jquery'],\n//  function(DNS, resize, Fail, URI, $) {\ndefine(function(require) {\n  'use strict';\n\n  var $ = require('jquery'),\n    URI = require('URI'),\n    Fail = require('fail');\n//\n//    define(['DNS', 'resize', 'Fail', 'URI', 'jquery'],\n//      function(DNS, resize, Fail, URI, $) {\n//\n//    'use strict';\n\n  //TODO: move all this init shit into an init function\n  //init\n  // creates speech.js postMessage() watchers\n  // returns [URLS] + postMessage\n  //\n  //main func tests urls\n  //loads in url bar\n//    function init() {\n//      /**\n//       * URL from the url bar, which is really a Universal Resource Indicator as\n//       * it is the jsdns URL + URN of the destination site.\n//       * @type {URI}\n//       */\n//      var uri = new URI();\n//      console.info('uri: ' + uri);\n//      /**\n//       * Universal Resource Name (domain 'name')\n//       * @type { string }\n//       */\n//      var urn = uri.subdomain().split('.').slice(-1).pop();\n//      console.info('urn: ' + urn);\n//      /**\n//       * Hash URI for speech.is#example.bit support\n//       * @type { string }\n//       */\n//      var hash = URI(uri.fragment());\n//      console.info('fragment: ' + hash);\n//      /**\n//       * Main navigational frame\n//       * @type {Object}\n//       */\n//      var iframe = $('#speech');\n//      console.info('iframe: ', iframe);\n//      if (urn === '') {\n//        if (hash.tld())\n//        //TODO: test this\n//          urn = hash.domain().slice(0, -hash.tld().length)[0];\n//        else\n//          urn = 'www';\n//      }\n//      return {urn: urn, iframe: iframe};\n//    }\n\n//    var __ret = init();\n//    var urn = __ret.urn;\n//    var iframe = __ret.iframe;\n//    var record = DNS.lookup(urn);\n//    console.info('record: ', record);\n//\n//    var urls = record._jsdns.uris;\n//\n//    console.info('urls: ' + urls, urls);\n\n//    load(urls);\n  function Nav(iframe) {\n\n    this.iframe = iframe;\n    this.self = this;\n    // TODO: look into weird XHTTP request pseudo-iFrame hack\n    // Sites relying on nameservers instead of dedicated IPs or `translate` URLs\n    // require asking the nameserver using headers w/ the .bit address but since\n    // the client obviously doesn't have a DNS server which resolves the .bit\n    // domain name space we have to forge the headers.  This is doable with\n    // XHTTP but not with iFrames HOWEVER the destination site will require CORS\n    // which would be easier than a full website port.  Anyway, that's why\n    // this is a weird object instead of just a var, because it might be\n    // abstracted and I have an unhealthy obsession with OO code :p\n    // TODO: make a github ticket explaining the above :p\n\n    /**\n     * @param {string | Object} url Full href (jsDNS) or URI object (internal nav)\n     * TODO: replace w/ an object that can be bound to URL and use postMessage\n     * w/ destination sites that include cooperative JS lib.\n     */\n    this.go = function(url) {\n      if (typeof url === 'string') {\n        url = URI(url);\n      }\n      //TODO: handle pathname, fragments, etc from original URL\n      this.iframe.attr('src', url.href());\n    }\n\n    /**\n     * Tests all potential URI's for connectivity\n     * @param {(Array.<URI> | Array.<string>)} urls\n     * TODO: Benchmark webSockets vs HEAD request\n     */\n    this.load = function(urls) {\n\n      //TODO: modularize into\n      // 404\n      //  fails\n      // Success = urls.some( try (test())\n      //                      catch(fail){\n      //                           if(fail == 404) 404s.push(fail)\n      //                      finally(if (debug) log fail; return false);\n      //  if(no success){ if (404) success = 404 uri\n      //                  elseif (fails) throw fails\n      //                  else throw new fail\n      //\n\n      var result = urls.some(function(url, go) {\n        //TODO: replace localStorage w/ a better abstraction layer\n        //new URI because localStorage mangles URI objects\n        url = new URI(url);\n        console.group();\n        console.info('connectivity test of ' + url.href());\n        $.ajax({\n          type: 'HEAD',\n          url : url.href()\n        })\n          .complete(function(jqXHR, textStatus) {\n            console.info(url, jqXHR, textStatus);\n            if (textStatus !== 'timeout') {\n              //DNS level connectivity === timeouts.\n              console.info(url.href() + ' is reachable.');\n              console.groupEnd();\n              //TODO: do this w/out the global var!\n              self.go(url);\n              return true;\n            } else {\n              console.warn(url.href() + ' is NOT reachable.');\n              console.groupEnd();\n//                throw new Fail({name:'timeout', message:'None of these urls worked: ' + urls});\n              return false;\n            }\n          })\n      });\n    }\n\n  }\n\n  //I'm not proud of this, but I need this thing working right fucking NOW.\n//  window.go = this.go;\n//  window.iframe = iframe;\n//}\n//\n\n  return Nav;\n});","/**\n * @license AGPLv3 2013\n * @author indolering\n */\ndefine(function(require) {\n  'use strict';\n\n  var $ = require('jquery'),\n    URI = require('URI'),\n    SecondLevelDomains = require('SecondLevelDomains');\n//    punycode = require('punycode');\n\n  /**\n   * Valid 'value' field from .bit domain name spec.\n   * @typedef {Object} bit-value\n   * @property {(string | Array.<string>)} service,\n   * @property {(string | Array.<string>)} ip,\n   * @property {(string | Array.<string>)} ip6,\n   * @property {(string | Array.<string>)} tor,\n   * @property {(string | Array.<string>)} i2p,\n   * @property {(string | Array.<string>)} freenet,\n   * @property {(string | Array.<string>)} alias,\n   * @property {(string | Array.<string>)} translate,\n   * @property {(string | Array.<string>)} email,\n   * @property {(string | Array.<string>)} loc,\n   * @property {(string | Array.<string>)} info,\n   * @property {(string | Array.<string>)} ns,\n   * @property {(string | Array.<string>)} delegate,\n   * @property {(string | Array.<string>)} import,\n   * @property {Object} map,\n   * @property {Object} tls\n   * */\n\n\n  /**\n   * Record for DNS entries.\n   * @typedef {Object} Record\n   * @property {String} name - Name of domain, assumes '.bit'\n   * @property {bit-value} value - 'value' field from .bit domain name spec.\n   * @property {Object} _jsdns - convenience used by JSDNS, not standard.\n   * */\n\n  /**\n   * Factory for DNS objects.\n   * @param { string } n Name field for record.\n   * @param {( string | {bit-value} )} v DNS value field for record.\n   * @constructor\n   * @template Record\n   * @returns {Record}\n   */\n  function Record(n, v) {\n\n    if (typeof v == 'string')\n      v = JSON.parse(v);\n\n    this.name = n;\n    this.value = v;\n    this._jsdns = {\n      uris: []\n    };\n\n    var uris = this._jsdns.uris;\n    Object.keys(v).forEach(function(key) {\n      if ([\n        'ip',\n        'translate'\n        //TODO: the rest of these require testing for connectivity.\n        //'ip6',\n        //'alias',\n        //'tor',\n        //'i2p',\n        //'freenet',\n        //'ns',\n        //'email',\n      ].indexOf(key) > -1) {\n\n        //spec store single entries as String and multiple entries as an array\n        var temp = v[key];\n        if (!$.isArray(temp)) {\n          temp = new Array(temp)\n        }\n\n        //TODO: extend uri.js to accept IP's as the hostname by default\n        temp.forEach(function(uri) {\n          if (key === 'ip' || key === 'ip6') {\n            uri = '//' + uri;\n          }\n          uris.push(new URI(uri).href());\n          //.href() because local storage is messing up the functions. Temp Fix.\n        });\n\n      }\n    })\n\n  }\n\n  /*\n   * TODO: extend URI.js to include 'tor' etc and store type as number\n   * TODO: sort URI array by network size:\n   *\n   * this._jsdns.uris.sort(function(a,b){\n   *   ...\n   * });\n   *\n   * ~log(relative network size) * 10:\n   * freenet/tor*100           = Log(~1) * 10 = 10\n   * i2p/torr*100              = ~10          = 20\n   * tor/tor*100               = 100          = 30\n   * translate -> .bit (why?)  = 1000         = 40\n   * ipv6/ipv4 ~.1 *100 *.bit  = 10000        = 50\n   * ipv4/ipv4 * * 100 * .bit  = 100000       = 60\n   * ICANN (translate -> !.bit)= 1000000      = 70\n   *\n   * freenet: http://asksteved.com/stats/ 9,000\n   * i2p|eep: stats.i2p 40,000\n   * Tor: https://metrics.torproject.org/users.html 400,000\n   */\n  return Record;\n});\n\n","/**\n * Binds iFrame to window resize events in-sync with paint to avoid flicker\n * @license AGPLv3 2013\n * @author indolering\n * Credit: https://developer.mozilla.org/en-US/docs/Web/Reference/Events/resize\n * (re)Licensed: http://tinyurl.com/mle6an4\n */\n\ndefine(function(require) {\n  'use strict';\n\n  var domReady = require('domReady'),\n    resizeFired = false,\n    drawing = false,\n    reqFrame = window.requestAnimationFrame;\n\ndomReady(function () {\n    var iframe = document.getElementById('speech');\n    iframe.height = document.documentElement.clientHeight;\n    iframe.width = document.documentElement.clientWidth;\n    window.addEventListener('resize', throttleResize, false);\n    console.info('resize.js registered');\n    if(!iframe){\n      console.error('iframe is '+ iframe + \" in resize.js\");\n    }\n  });\n\nfunction throttleResize() {\n  if (drawing === false) {\n    resizeFired = true;\n    drawResize();\n  }\n}\n\nfunction drawResize() {\n  // render friendly resize loop\n  if (resizeFired === true) {\n    resizeFired = false;\n    drawing = true;\n\n    iframe.height = document.documentElement.clientHeight;\n    iframe.width = document.documentElement.clientWidth;\n    //TODO: make this standards compliant\n    //https://bugzilla.mozilla.org/show_bug.cgi?id=189112#c7\n    //https://developer.mozilla.org/en-US/docs/Web/API/window.innerHeight?redirectlocale=en-US&redirectslug=DOM%2Fwindow.innerHeight\n\n    reqFrame(drawResize);\n  } else {\n    drawing = false;\n  }\n}\n});","\nvar hello = require('/scripts/helloWorld').hello;\n\nconsole.log(hello());\n\nwindow.onload = function() {\n  document.getElementById('hello').innerText = hello();\n}\n\n///**\n// * @license AGPLv3 2013\n// * @author indolering\n// */\n//\n///* Routing setup\n//\n//DNS\n// 1) www.jsdns.tld -> IP\n// 2) *.jsdns.tld -> IP\n//\n//Virtual Host\n// 1) TODO: https://api.www.jsdns.tld -> /var/www/api/\n// 2) https://www.jsdns.tld -> /var/www/jsdns.tld/\n// 3) http(s)//*.jsdns.tld -> /var/www/jsdns.tld/index.html\n//\n//    Note that WHATEVER the URL, the vhost for *.jsdns.tld ALWAYS returns the\n//    index.html file.  Also note the *.www.jsdns.tld hack, we can still have\n//    cnames we just have to throw 'www' in the front of them.\n//\n//JavaScript\n// 1) https://destination.jsdns.tld -> dns.lookup(destination) -> nav.check(destination)\n//      TODO: if (destination !https) downgrade to http\n//      finally nav.go(destination)\n// 2) https//jsdns.tld -> https//www.jsdns.tld\n// 3) https//www.jsdns.tld -> https//www.jsdns.tld (login/find DNS publisher)\n//\n// */\n//\n//\n//require.config({\n//  paths: {\n//    jquery: '../bower_components/jquery/jquery',\n//    bootstrap: '../bower_components/bootstrap/dist/js/bootstrap',\n//    domReady: '../bower_components/requirejs-domready/domReady',\n//    requirejs: '../../bower_components/domready/ready.js',\n//    URI: '../bower_components/uri.js/src/URI',\n//    IPv6: '../bower_components/uri.js/src/IPv6',\n//    SecondLevelDomains: '../bower_components/uri.js/src/SecondLevelDomains',\n//    punycode: '../bower_components/uri.js/src/punycode',\n//    URITemplate: '../bower_components/uri.js/src/URITemplate',\n//    'jquery.URI': '../bower_components/uri.js/src/jquery.URI'\n//  }\n//});\n//\n////TODO: change everything to sugary require declarations\n//require(['scripts/dns', 'resize', 'nav', 'jquery', 'domReady', 'URI'],\n//  function(DNS, resize, Nav, $, domReady, URI) {\n//    'use strict';\n//    /**\n//     * @define {boolean} enables debug mode switch for compiler arg\n//     */\n//\n//    //TODO: turn all debug and console.info() shit into real unit tests\n//    var DEBUG = true;\n//    // Prevent console call to throw errors on old browser\n//    // Mute console when DEBUG is set to false\n//    // TODO: turn DEBUG to false on grunt:build\n//    if (DEBUG) {\n//\n//      //TODO: make internal to jsDNS server.\n//      //TODO: add some major sites external to jsDNS server.\n//      var dummies = [\n//        ['www', {'translate': 'http://www.speech.is/connect.html'}],\n//        ['ipv4', {'ip': '208.113.212.187'}],\n//        ['ipv6', {'ip6': '2607:f298:5:102b::ddb:b09e'}],\n//        ['ipv4-2', {'ip': ['208.113.212.187', '208.113.212.1s87']}],\n//        ['ipv6-2', {'ip6': ['2607:f298:5:102b::ddb:b09e',\n//          '2607:f298:5:102b::af3:5aa3']}],\n//        ['bits', {'ip': ['208.113.212.187'], 'cors': ['speech.is']}],\n//        ['indolering', {'ip': ['208.113.212.21'], 'cors': ['speech.is']}],\n//        ['eff', {'translate': 'https://www.eff.org'}],\n//        ['sunlightfoundation', {'translate': 'http://www.sunlightfoundation.com'}],\n//        ['internetdefenseleague', {'translate': 'http://www.internetdefenseleague.org'}],\n//        ['wikipedia', {'translate': 'https://www.wikipedia.org'}],\n//        ['accessnow', {'translate': 'https://www.accessnow.org'}],\n//        ['reddit', {'translate': 'https://www.reddit.com'}],\n//        ['freepress', {'translate': 'http://www.freepress.net/'}],\n//        ['aaronsw', {'translate': 'http://www.aaronsw.com/'}],\n//        ['fightforthefuture', {'translate': 'http://www.fightforthefuture.org/'}],\n//        ['_setting', {'name': 'subscriber name', 'url': 'jsDNS url'}]\n//      ];\n//      dummies.forEach(function(dummy) {\n//        DNS.save({'name': dummy[0], 'value': dummy[1]});\n//      });\n//    }\n//\n//    domReady(function () {\n//\n//\n//      /**\n//       * URL from the url bar, which is really a Universal Resource Indicator as\n//       * it is the jsdns URL + URN of the destination site.\n//       * @type {URI}\n//       */\n//      var uri = new URI();\n//      console.info('uri: ' + uri);\n//      /**\n//       * Universal Resource Name (domain 'name')\n//       * @type { string }\n//       */\n//      var urn = uri.subdomain().split('.').slice(-1).pop();\n//      console.info('urn: ' + urn, urn);\n//      /**\n//       * Hash URI for jsdns.tld#example.bit support\n//       * @type { string }\n//       */\n//      var hash = uri.fragment();\n//      console.info('fragment: ' + hash);\n//\n//      if (urn === '') {\n//        if (hash && hash[0] !== '!')\n//          urn = hash;\n//        else\n//          urn = 'www';\n//      }\n//\n////      var dns = new dns();\n//      var record = DNS.lookup(urn);\n//      console.info('record: ', record);\n//\n//\n//      var nav = new Nav($('#speech'));\n//      nav.load(record._jsdns.uris);\n//      console.info('iframe: ', $('#speech'), 'uris: ', record._jsdns.uris);\n//\n//    });\n//\n//\n//\n//\n//    //TODO: abstract into httpS://api.www.jsdns.tld iFrame.postMessage()\n//    // isolates localStorage from malicious MTM attacks when destination site\n//    // http://example.jsdns.tld is not wrapped in SSL (Firefox will block comms\n//    // from HTTPS sites to non HTTPS websites).\n//    function dns(){\n//      return DNS;\n//        //this.iframe = $('#dns');\n////      this.lookup(urn){\n////        //iframe.postMessage(lookup)\n////      }\n//      //jquery deferred promises or #dns.listener{nav.load(record)}?\n//    }\n//\n////  dns.js √ 100%\n////  bits.name REST API √ 100%\n////  speech.js    √ 99%\n////  Config page √ 90%\n////  Demo page 0%\n////  DNS config √ 100%\n////  Server config √90%\n////  About page 25%\n////  Error page √ 100%\n////Public ALPHA\n////  Fake (temp) login page\n////  Cut down on build time\n////  JS for cooperative website URL passing\n////  Arbitrary Publisher webhooks\n////  Arbitrary name webhooks\n////  Source from GitHub repo\n////  GitHub auto-discovery\n////  Github login page\n////  Gmail login page?\n////\n////Developer BETA\n////  Get load and processing times down to 100ms (cached)?\n////  Official channels publish material OR return error 451 OR check bloomfilter\n////    for censored sites at which point the client fetches diff from\n////    decentralized sources.\n////  Additional general publishing servers for backup.\n////    RSS of changes?\n////    SubPubHub?\n////    CouchDB mirror <-> PouchDB client store?\n////    BloomFilter for TTL > 1 hour?\n////    Push to namecoin clients?\n////  Get from Twitter post\n////  Twitter auto-discovery from friends and messages\n////  Spam detection and baysian filtering\n////  Facebook auto-discovery\n////  CloudFlare app integration?\n////  WebRTC?\n////  Weird Ajax iFrame for nameservers??\n////  'Authenticated' feeds (http://username:password@url)??\n////  PGP message passing??\n////Public Beta\n////  Twitter/facebook/Diaspora publishing backend?\n////  Non HTTP redirects?\n////  Reverse proxy for webspiders mapping\n////  Crowdsourced DMCA frontend\n//  }\n//);\n//\n","exports.hello = function(){\n  return 'Hello World!';\n}"]}