{"name":"Speechjs","tagline":"The reference JavaScript DNS implementation","body":"## Introduction\r\nSpeech.js is a thin a thin wrapper which translates URI's between the traditional domain name system and an Alternative Domain Name System (altDNS), transforming `example.alt`-> `example.jsdns.tld`.  Speech.js is the reference implementation of the JavaScript Domain Name System client specification.  jsDNS clients are engineered to provide low-risk (as opposed to mirrors) and scalable (unlike server side proxies) access to altDNS systems that are nearly transparent to the end user and interoperable with the rest of the web.\r\n\r\n## Political\r\nSpeech.is (pronounced \"speech DOT is\") provides access to the .bit decentralyzed alternative domain name system. and serves as the reference deployment of Speech.js.  Speech.js, Speech.is, and the .bit DNS system are all parts of a larger effort to end the threat of SOPA and other state-sponsored [DNS censorship](https://www.eff.org/free-speech-weak-link#dns) regimes.\r\n\r\nSpeech.is comes with additional legal, technological, and political defenses above and beyond what a vanilla Speech.js implimention can provide.  For more information, see COMING SOON.\r\n\r\n## User Experience\r\njsDNS clients extend the existing user experience of browsing websites websites on alternative domain name systems  However, unlike server-side proxies and mirrors, jsDNS clients rely on the user for sources of routing information and perform all routing on the client-side. \r\n\r\nSpeech.js goes one step further by relying on the friend network for routing information, storing it ** in the browser** and automatically updating it whenever changes occur. From then on, even if the user restarts their computer, they are never prompted to login again.\r\n\r\nThe user experience for visiting a Speech.js website is identical to that of any other website with a login requirement, such as the New York Times or Facebook. \r\n\r\n## Legal\r\nAs Speech.js neither hosts nor links to any  content deemed objectionable in major western democracies, the Speech.js webhost, their upstream carriers, and the owners of the domain name are all immune from legal and political censorship.\r\n\r\n## Scaling\r\nAs a Speech.js deployment needs to host only 2 static files (the parent frame and the child frame) and can (soon) rely upon the [cdnjs](http://cdnjs.com/) CDN for hosting all CSS and Javascript. Furthermore, with Cloudflare's free HTML caching, any Speech.js deployment can scale to virtually any traffic load. Even if a deployment got as popular as the Yahoo.com homepage, the hosting costs would amount to around [$30/month](https://docs.google.com/spreadsheet/ccc?key=0Am9LbxJR3-Q-dFQ3c2lJa1BVejdrT2JnZjBRWm83YlE&usp=sharing).\r\n\r\n## example.jsdns.tld\r\n### navigationStart\r\nWhatever the URL, be it wikipedia.jsdns.tld or wikileaks.jsdns.tld, a Speech.js deployment serves the exact same webpage to visitors. What appears to be the Speech.is homepage is actually an iFrame containing a page from secure.jsdns.tld which contains the Speech.js script. The parent page (the jsdns.tld homepage) is hidden and the child page (from secure.jsdns.tld) is shown as if it were the main page using the new [`seamless`](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-iframe-element.html#attr-iframe-seamless) attribute. \r\n\r\n### redirectStart\r\nThe user logs into their social network of choice and chooses the jsDNS feeds they wish to subscribe to.  These feeds can be as simple as private friend to friend message with raw JSON, an app that the user or their friends have authorized, or jsDNS entries published as posts. Speech.js presents the lists to the user in order of popularity but ultimately lets the user decide which DNS publisher(s) s/he trusts.  Feeds can be customized for each subscriber, enabling publishers to hand out **unique (and presumably uncensored) endpoints for every user**.\r\n\r\n### domainLookupStart\r\nBecause the parent page at Speech.is  and  the child iFrame page have different URLs, the iFrame dictates can block the parent from accessing to its content. Instead, the parent window uses post messaging to relay the URI to <tt>Speech.js</tt> which subsequently looks up the name from <tt>[localStorage](http://en.wikipedia.org/wiki/Web_storage)</tt> and passes the URI back to parent frame. After this interaction, the inner iFrame blocks any additional requests for information, ensuring that destination websites cannot access the records. \r\n\r\n### requestStart\r\nThe parent iFrame takes this information and  loads the destination website using the iFrame containing the `secure.jsdns.tld` page.  There is a second iFrame that contains a webworker which updates the database in the background. It neither recieves nor sends messages from the parent frame.\r\n\r\nIf the destination webpage allows the parent page to access to its content<sup>[note](#cors)</sup> URLs pointing to a website on the alternative DNS domain are rewritten to jsdns.alt submains, transforming linkedsite.alt to linkedsite.jsdns.alt.  However,the [jsDNS specification](http://dot-bit.org/JsDNS_RFC) outlines [multiple access scenarios](http://dot-bit.org/JsDNS_RFC#User_Interaction_Models) and a website can enable any jsDNS deployment to rewrite it's page links, restrict access only to specific jsDNS deployments, perform it's own URL rewriting, or pop out of iFrame as security needs dictate.\r\n\r\nThe jsDNS deployment parent page (but not the secure.jsdns.tld page) is expected to have wildcard CORS access, enabling the destination website to verify the javascript, CSS, and HTML of the webpage.  We believe that we can maintain a level of security as high as your visitors local DNS server or your favorite package manager's local mirror.  In the future, we may be able to offer even stronger security guarantees.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.","google":"UA-45188614-1","note":"Don't delete this file! It's used internally to help with page regeneration."}